################################################################################
#
# RevBayes Example: Species tree inference using the multispecies coalescent.
#
# 
# This file: Specifies the HKY model with a strict clock.
#            Here, we run an MCMC on this model.
#
# authors: Bastien Boussau and Sebastian Hoehna
#
################################################################################

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

locus_names = ["COIII", "FGA", "GHRmeredith", "lrpprc_169", "npas3", "sim1", "tex2", "ttr", "zfy", "zic3"]

num_loci = locus_names.size()

# read in each data matrix separately
for ( i in 1:num_loci ) {
    data[i] <- readDiscreteCharacterData("data/" + locus_names[i] + ".fasta")
}
# alternatively we could have read in from data/merged.nex too (although that contains the empty sequences ...)

# Get some useful variables from the data. We need these later on.
primate_tree = readTrees("data/primates.tree")[1]
n_species <- primate_tree.ntips()
names <- primate_tree.names()
n_branches <- 2 * n_species - 1 # number of branches in a rooted tree

# set my move index
mi = 0



######################
# Substitution Model #
######################


for ( i in 1:num_loci ) {

    #### specify the HKY substitution model applied uniformly to all sites ###
    kappa[i] ~ dnLognormal(0,1)
    moves[++mi] = mvScale(kappa[i],weight=1)


    pi_prior[i] <- v(1,1,1,1) 
    pi[i] ~ dnDirichlet(pi_prior[i])
    moves[++mi] = mvSimplexElementScale(pi[i],weight=2)


    #### create a deterministic variable for the rate matrix ####
    Q[i] := fnHKY(kappa[i],pi[i]) 

}


######################
# Species-Tree model #
######################

# Specify a prior on the diversification and turnover rate
diversification ~ dnGamma(2,2)
relativeExtinction ~ dnBeta(1,1)

# now transform the diversification and turnover rates into speciation and extinction rates
speciation := abs(diversification / (1.0 - relativeExtinction) )
extinction := speciation * relativeExtinction

# specify a prior on the root age (our informed guess is about 75-80 mya)
root ~ dnUniform(0,1000)

# Now comes the most important trick!!!
# 
# We need to set a low root age so that in the beginning of the MCMC all lineages
# evolve in the same "root" population.
# This enables that we can quickly get good estimates of the gene-trees and then
# pull up the species tree.
root.setValue(0.001)

sampling_fraction <- 23 / 450 # 23 out of the ~ 450 primate species

# create some moves that change the stochastic variables
# all moves are sliding proposals but you could use scaling proposals for the rates too
moves[++mi] = mvSlide(diversification,delta=1,tune=true,weight=2)
moves[++mi] = mvSlide(relativeExtinction,delta=1,tune=true,weight=2)
moves[++mi] = mvScale(diversification,lambda=1,tune=true,weight=2)
moves[++mi] = mvScale(relativeExtinction,lambda=1,tune=true,weight=2)
moves[++mi] = mvSlide(root,delta=1,tune=true,weight=0.1)
moves[++mi] = mvScale(root,lambda=1,tune=true,weight=0.1)


# construct a variable for the tree drawn from a birth death process
psi ~ dnBDP(lambda=speciation, mu=extinction, rootAge=abs(root), rho=sampling_fraction, nTaxa=n_species, names=names )

moves[++mi] = mvNarrow(psi, weight=5.0)
moves[++mi] = mvNNI(psi, weight=1.0)
moves[++mi] = mvFNPR(psi, weight=3.0)
moves[++mi] = mvGPR(psi, weight=3.0)
moves[++mi] = mvSubtreeScale(psi, weight=3.0)
moves[++mi] = mvNodeTimeSlideUniform(psi, weight=15.0)



###################
# Gene-Tree model #
###################


# We assume independent population size parameters for each branch of the species tree.
for (i in 1:n_branches) {
  Ne[i] ~ dnExponential(1.0)
  moves[++mi] = mvScale(Ne[i],1,true,1.0)
}

moves[++mi] = mvUpDownScale(up=[psi],down=Ne)

# We could also assume a single effective population size for the entire species tree.
#Ne ~ dnGamma(shape=1.0,rate=1.0)
#moves[++mi] = mvScale(Ne,1,true,1.0)



for (i in 1:num_loci) {

   taxa = readTaxonData("data/species_maps/primates_" + locus_names[i] + "_species_map.txt")

   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes, 
   # allowing 1 parameter per branch of the species tree, the same line would work.
   geneTree[i] ~ dnCoalMultiSpeciesConst(speciesTree=psi, Ne=Ne, taxa=taxa)

   # moves on the tree
   moves[++mi] = mvNNI(geneTree[i], 5.0)
   moves[++mi] = mvNarrow(geneTree[i], 5.0)
   moves[++mi] = mvFNPR(geneTree[i], 3.0)
   moves[++mi] = mvGPR(geneTree[i], 2.0)
   moves[++mi] = mvSubtreeScale(geneTree[i], 5.0)
   moves[++mi] = mvTreeScale(geneTree[i], 1.0, true, 3.0)
   moves[++mi] = mvNodeTimeSlideUniform(geneTree[i], 20.0)
   moves[++mi] = mvRootTimeSlide(geneTree[i], 1.0, true, 3.0)

}



###############
# Clock Model #
###############

# We use a fixed estimate of the clock rate which is 1.00 per million years per site
clockRate[1] <- 1.0

for ( i in 2:num_loci ) { 
    relativeClockRate[i] ~ dnLognormal(0,1)
    clockRate[i] := clockRate[1] * relativeClockRate[i]
    moves[++mi] = mvScale(relativeClockRate[i],lambda=1,tune=true,weight=1)
    moves[++mi] = mvUpDownScale(up=[geneTree[i]],down=[relativeClockRate[i]])
}

###################
# PhyloCTMC Model #
###################



for ( i in 1:num_loci ) { 
    # the sequence evolution model
    seq[i] ~ dnPhyloCTMC(tree=geneTree[i], Q=Q[i], branchRates=clockRate[i], type="DNA")

    # attach the data
    seq[i].clamp(data[i])
}




#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(psi)






monitors[1] = mnScreen(printgen=100, root)
monitors[2] = mnModel(filename="output/primates_fixed_clock.log",printgen=10, separator = TAB)
monitors[3] = mnFile(filename="output/primates_fixed_clock.trees",printgen=10, separator = TAB, psi)
for ( i in 1:num_loci ) { 
    # add a monitor per gene tree
    monitors[i+3] = mnFile(filename="output/primates_fixed_clock_" + locus_names[i] + ".trees",printgen=10, separator = TAB, geneTree[i])
}

# Here we use a plain MCMC. You could also set nruns=2 for replicated analysis
# or use mcmcmc with heated chains.
mymcmc = mcmc(mymodel, monitors, moves, nruns=1)

# This should be sufficient to obtain enough MCMC samples
mymcmc.burnin(generations=5000,tuningInterval=500)
mymcmc.run(generations=50000)


# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace = readTreeTrace("output/primates_fixed_clock.trees", treetype="clock")
# and get the summary of the tree trace
treetrace.summarize()

mapTree(treetrace,"output/primates_fixed_clock.tree")

# you may want to quit RevBayes now
#q()

